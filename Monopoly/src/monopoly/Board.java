/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package monopoly;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author lo_856348
 */
public class Board extends javax.swing.JFrame {

    /**
     * Creates new form Board
     */
	
	/* All these variables are used to control actions of the players in the game
	 * and to make sure nothing happens that isn't supposed to.
	 */
    Data data;
    int playerNum;
    private File location;
    boolean canRoll;
    boolean accepted;
    boolean chosen;
    boolean addHotel;
    boolean isPlayer1;
    boolean isPlayer2;
    boolean isPlayer3;
    boolean isPlayer4;
    boolean wantToBuy;
    public final String NOJAILCARD = "No Get Out Of Jail Free Card";
    public final String JAILCARDNOJAIL = "Currently Not In Jail";
    public final String JAILCARDJAIL = "Use Get Out Of Jail Free Card";
	int[] indexes;
	
	/* Sets the default values of the variables for when players just enter the
	 * game
	 */
    public Board() {
        initComponents();
        data = new Data();
        playerNum = 0;
        canRoll = true;
        chosen = false;
        addHotel = false;
        isPlayer1 = false;
        isPlayer2 = false;
        isPlayer3 = false;
        isPlayer4 = false;
        wantToBuy = false;
		indexes = new int[4];
		drawPlayers();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tradeDialog = new javax.swing.JDialog();
        tradePanel = new javax.swing.JPanel();
        trade_traderName = new javax.swing.JLabel();
        trade_propertyGivenField = new javax.swing.JTextField();
        trade_propertyGiven = new javax.swing.JLabel();
        trade_cashGiven = new javax.swing.JLabel();
        trade_cashGivenField = new javax.swing.JTextField();
        trade_tradeeName = new javax.swing.JLabel();
        trade_tradeeField = new javax.swing.JTextField();
        trade_propertyReceived = new javax.swing.JLabel();
        trade_cashReceived = new javax.swing.JLabel();
        trade_propertyReceivedField = new javax.swing.JTextField();
        trade_cashReceivedField = new javax.swing.JTextField();
        trade_finishBtn = new javax.swing.JButton();
        trade_cancelBtn = new javax.swing.JButton();
        accept = new javax.swing.JDialog();
        accept_traderName = new javax.swing.JLabel();
        accept_give = new javax.swing.JLabel();
        accept_giveProperty = new javax.swing.JLabel();
        accept_giveCash = new javax.swing.JLabel();
        accept_get = new javax.swing.JLabel();
        accept_getProperty = new javax.swing.JLabel();
        accept_getCash = new javax.swing.JLabel();
        accept_acceptBtn = new javax.swing.JButton();
        accept_declineBtn = new javax.swing.JButton();
        manageDialog = new javax.swing.JDialog();
        manage_title = new javax.swing.JLabel();
        manage_propertyLabel = new javax.swing.JLabel();
        manage_propertyField = new javax.swing.JTextField();
        manage_housesLabel = new javax.swing.JLabel();
        manage_houseField = new javax.swing.JTextField();
        manage_hotel = new javax.swing.JCheckBox();
        manage_note = new javax.swing.JLabel();
        manage_cost = new javax.swing.JLabel();
        manage_finish = new javax.swing.JButton();
        manage_cancel = new javax.swing.JButton();
        manage_updateCash = new javax.swing.JButton();
        startGame_addPlayers = new javax.swing.JDialog();
        startGame_title = new javax.swing.JLabel();
        isPlayerOne = new javax.swing.JCheckBox();
        isPlayerTwo = new javax.swing.JCheckBox();
        isPlayerFour = new javax.swing.JCheckBox();
        isPlayerThree = new javax.swing.JCheckBox();
        startGame_player1Name = new javax.swing.JTextField();
        startGame_player2Name = new javax.swing.JTextField();
        startGame_player3Name = new javax.swing.JTextField();
        startGame_player4Name = new javax.swing.JTextField();
        startGame_finishAddingPlayers = new javax.swing.JButton();
        buyProperty = new javax.swing.JDialog();
        buyProperty_yes = new javax.swing.JButton();
        buyProperty_no = new javax.swing.JButton();
        buyProperty_name = new javax.swing.JLabel();
        Game = new javax.swing.JPanel();
        Player1 = new javax.swing.JPanel();
        player1_name = new javax.swing.JLabel();
        player1_cashLabel = new javax.swing.JLabel();
        player1_cash = new javax.swing.JLabel();
        player1_properties = new javax.swing.JScrollPane();
        player1_propertiesTable = new javax.swing.JTable();
        player1_jailCard = new javax.swing.JButton();
        Player2 = new javax.swing.JPanel();
        player2_name = new javax.swing.JLabel();
        player2_cashLabel = new javax.swing.JLabel();
        player2_cash = new javax.swing.JLabel();
        player2_properties = new javax.swing.JScrollPane();
        player2_propertiesTable = new javax.swing.JTable();
        player2_jailCard = new javax.swing.JButton();
        Player3 = new javax.swing.JPanel();
        player3_name = new javax.swing.JLabel();
        player3_cashLabel = new javax.swing.JLabel();
        player3_cash = new javax.swing.JLabel();
        player3_properties = new javax.swing.JScrollPane();
        player3_propertiesTable = new javax.swing.JTable();
        player3_jailCard = new javax.swing.JButton();
        Player4 = new javax.swing.JPanel();
        player4_name = new javax.swing.JLabel();
        player4_cashLabel = new javax.swing.JLabel();
        player4_cash = new javax.swing.JLabel();
        player4_properties = new javax.swing.JScrollPane();
        player4_propertiesTable = new javax.swing.JTable();
        player4_jailCard = new javax.swing.JButton();
        board = new PlayerIcon();
        BoardIcon = new javax.swing.JLabel();
        buttons = new javax.swing.JPanel();
        rollDice = new javax.swing.JButton();
        trade = new javax.swing.JButton();
        manage = new javax.swing.JButton();
        endTurn = new javax.swing.JButton();
        indexOfPlayers = new javax.swing.JLabel();
        p1Index = new javax.swing.JLabel();
        p2Index = new javax.swing.JLabel();
        p3Index = new javax.swing.JLabel();
        p4Index = new javax.swing.JLabel();
        buyPropertyButton = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        file_newGame = new javax.swing.JMenuItem();
        file_openGame = new javax.swing.JMenuItem();
        file_save = new javax.swing.JMenuItem();
        file_saveAs = new javax.swing.JMenuItem();
        file_close = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        tradeDialog.setMinimumSize(new java.awt.Dimension(614, 300));
        tradeDialog.setResizable(false);

        tradePanel.setMaximumSize(new java.awt.Dimension(614, 400));
        tradePanel.setMinimumSize(new java.awt.Dimension(614, 400));
        tradePanel.setPreferredSize(new java.awt.Dimension(614, 400));

        trade_traderName.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        trade_traderName.setText("(Name)");

        trade_propertyGivenField.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        trade_propertyGivenField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trade_propertyGivenFieldActionPerformed(evt);
            }
        });

        trade_propertyGiven.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        trade_propertyGiven.setText("Property Given:");

        trade_cashGiven.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        trade_cashGiven.setText("Cash Given:   $");

        trade_cashGivenField.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        trade_cashGivenField.setText("0");
        trade_cashGivenField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trade_cashGivenFieldActionPerformed(evt);
            }
        });

        trade_tradeeName.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        trade_tradeeName.setText("Trade With:");

        trade_tradeeField.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N

        trade_propertyReceived.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        trade_propertyReceived.setText("Property Received:");

        trade_cashReceived.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        trade_cashReceived.setText("Cash Received:   $");

        trade_propertyReceivedField.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        trade_cashReceivedField.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        trade_cashReceivedField.setText("0");

        trade_finishBtn.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        trade_finishBtn.setText("Trade");
        trade_finishBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trade_finishBtnActionPerformed(evt);
            }
        });

        trade_cancelBtn.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        trade_cancelBtn.setText("Cancel");

        javax.swing.GroupLayout tradePanelLayout = new javax.swing.GroupLayout(tradePanel);
        tradePanel.setLayout(tradePanelLayout);
        tradePanelLayout.setHorizontalGroup(
            tradePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tradePanelLayout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(tradePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(trade_finishBtn)
                    .addGroup(tradePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(trade_traderName)
                        .addGroup(tradePanelLayout.createSequentialGroup()
                            .addGroup(tradePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(trade_propertyGiven, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(trade_cashGiven, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGap(10, 10, 10)
                            .addGroup(tradePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(trade_propertyGivenField)
                                .addComponent(trade_cashGivenField, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                .addGroup(tradePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tradePanelLayout.createSequentialGroup()
                        .addGroup(tradePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(trade_propertyReceived, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(trade_tradeeName)
                            .addComponent(trade_cashReceived, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(10, 10, 10)
                        .addGroup(tradePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(trade_tradeeField)
                            .addComponent(trade_propertyReceivedField)
                            .addComponent(trade_cashReceivedField, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)))
                    .addComponent(trade_cancelBtn))
                .addGap(50, 50, 50))
        );
        tradePanelLayout.setVerticalGroup(
            tradePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tradePanelLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(tradePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(trade_traderName)
                    .addComponent(trade_tradeeName)
                    .addComponent(trade_tradeeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(49, 49, 49)
                .addGroup(tradePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(trade_propertyGivenField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(trade_propertyGiven)
                    .addComponent(trade_propertyReceived)
                    .addComponent(trade_propertyReceivedField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(tradePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(trade_cashGiven)
                    .addComponent(trade_cashGivenField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(trade_cashReceived)
                    .addComponent(trade_cashReceivedField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(tradePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(trade_finishBtn)
                    .addComponent(trade_cancelBtn))
                .addGap(25, 25, 25))
        );

        javax.swing.GroupLayout tradeDialogLayout = new javax.swing.GroupLayout(tradeDialog.getContentPane());
        tradeDialog.getContentPane().setLayout(tradeDialogLayout);
        tradeDialogLayout.setHorizontalGroup(
            tradeDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 634, Short.MAX_VALUE)
            .addGroup(tradeDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tradeDialogLayout.createSequentialGroup()
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(tradePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        tradeDialogLayout.setVerticalGroup(
            tradeDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
            .addGroup(tradeDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tradeDialogLayout.createSequentialGroup()
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(tradePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(104, Short.MAX_VALUE)))
        );

        accept_traderName.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        accept_traderName.setText("Trade From: (Name)");

        accept_give.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        accept_give.setText("You Give:");

        accept_giveProperty.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        accept_giveProperty.setText("Property: (Property)");

        accept_giveCash.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        accept_giveCash.setText("Cash: $0");

        accept_get.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        accept_get.setText("You Get:");

        accept_getProperty.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        accept_getProperty.setText("Property: (Property)");

        accept_getCash.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        accept_getCash.setText("Cash: $0");

        accept_acceptBtn.setText("Accept");
        accept_acceptBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                accept_acceptBtnActionPerformed(evt);
            }
        });

        accept_declineBtn.setText("Decline");
        accept_declineBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                accept_declineBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout acceptLayout = new javax.swing.GroupLayout(accept.getContentPane());
        accept.getContentPane().setLayout(acceptLayout);
        acceptLayout.setHorizontalGroup(
            acceptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(acceptLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(acceptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(accept_traderName)
                    .addGroup(acceptLayout.createSequentialGroup()
                        .addGroup(acceptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(accept_acceptBtn)
                            .addGroup(acceptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(accept_give)
                                .addComponent(accept_giveProperty)
                                .addComponent(accept_giveCash)))
                        .addGap(50, 50, 50)
                        .addGroup(acceptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(accept_getCash)
                            .addComponent(accept_getProperty)
                            .addComponent(accept_get)
                            .addComponent(accept_declineBtn))))
                .addContainerGap(25, Short.MAX_VALUE))
        );
        acceptLayout.setVerticalGroup(
            acceptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(acceptLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(accept_traderName)
                .addGap(25, 25, 25)
                .addGroup(acceptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(accept_give)
                    .addComponent(accept_get))
                .addGap(20, 20, 20)
                .addGroup(acceptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(accept_giveProperty)
                    .addComponent(accept_getProperty))
                .addGap(20, 20, 20)
                .addGroup(acceptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(accept_giveCash)
                    .addComponent(accept_getCash))
                .addGap(18, 18, 18)
                .addGroup(acceptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(accept_acceptBtn)
                    .addComponent(accept_declineBtn))
                .addContainerGap(25, Short.MAX_VALUE))
        );

        manageDialog.setMinimumSize(new java.awt.Dimension(500, 400));
        manageDialog.setResizable(false);

        manage_title.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        manage_title.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        manage_title.setText("(Name): Manage");

        manage_propertyLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        manage_propertyLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        manage_propertyLabel.setText("Property to Manage:");

        manage_propertyField.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        manage_housesLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        manage_housesLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        manage_housesLabel.setText("Houses to Add:");

        manage_houseField.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        manage_hotel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        manage_hotel.setText("Add Hotel?");
        manage_hotel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manage_hotelActionPerformed(evt);
            }
        });

        manage_note.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        manage_note.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        manage_note.setText("**If you add houses, do not add a hotel. If you add a hotel, do you add houses.**");

        manage_cost.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        manage_cost.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        manage_cost.setText("Total Cost: $0");

        manage_finish.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        manage_finish.setText("Finish");
        manage_finish.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manage_finishActionPerformed(evt);
            }
        });

        manage_cancel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        manage_cancel.setText("Cancel");
        manage_cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manage_cancelActionPerformed(evt);
            }
        });

        manage_updateCash.setText("Update Cash");
        manage_updateCash.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manage_updateCashActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout manageDialogLayout = new javax.swing.GroupLayout(manageDialog.getContentPane());
        manageDialog.getContentPane().setLayout(manageDialogLayout);
        manageDialogLayout.setHorizontalGroup(
            manageDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, manageDialogLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(manage_hotel)
                .addGap(205, 205, 205))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, manageDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(manageDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(manage_note, javax.swing.GroupLayout.DEFAULT_SIZE, 480, Short.MAX_VALUE)
                    .addComponent(manage_title, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, manageDialogLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(manage_cost, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(manage_updateCash))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, manageDialogLayout.createSequentialGroup()
                        .addGroup(manageDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, manageDialogLayout.createSequentialGroup()
                                .addGroup(manageDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(manage_propertyLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(manage_housesLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(manageDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(manage_propertyField)
                                    .addComponent(manage_houseField, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, manageDialogLayout.createSequentialGroup()
                                .addGap(135, 135, 135)
                                .addComponent(manage_finish, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(manage_cancel, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        manageDialogLayout.setVerticalGroup(
            manageDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(manageDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(manage_title, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(manageDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(manage_propertyLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(manage_propertyField, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(manageDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(manage_houseField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(manage_housesLabel))
                .addGap(18, 18, 18)
                .addComponent(manage_hotel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(manage_note, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(manageDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(manage_cost)
                    .addComponent(manage_updateCash))
                .addGap(18, 18, 18)
                .addGroup(manageDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(manage_finish, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(manage_cancel, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        startGame_addPlayers.setMinimumSize(new java.awt.Dimension(450, 300));
        startGame_addPlayers.setResizable(false);

        startGame_title.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        startGame_title.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        startGame_title.setText("Add Players");

        isPlayerOne.setText("Player 1 Name:");
        isPlayerOne.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                isPlayerOneActionPerformed(evt);
            }
        });

        isPlayerTwo.setText("Player 2 Name:");
        isPlayerTwo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                isPlayerTwoActionPerformed(evt);
            }
        });

        isPlayerFour.setText("Player 4 Name:");
        isPlayerFour.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                isPlayerFourActionPerformed(evt);
            }
        });

        isPlayerThree.setText("Player 3 Name:");
        isPlayerThree.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                isPlayerThreeActionPerformed(evt);
            }
        });

        startGame_finishAddingPlayers.setText("START GAME");
        startGame_finishAddingPlayers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startGame_finishAddingPlayersActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout startGame_addPlayersLayout = new javax.swing.GroupLayout(startGame_addPlayers.getContentPane());
        startGame_addPlayers.getContentPane().setLayout(startGame_addPlayersLayout);
        startGame_addPlayersLayout.setHorizontalGroup(
            startGame_addPlayersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(startGame_addPlayersLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(startGame_title, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(startGame_addPlayersLayout.createSequentialGroup()
                .addGap(126, 126, 126)
                .addGroup(startGame_addPlayersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(isPlayerThree)
                    .addComponent(isPlayerFour)
                    .addComponent(isPlayerTwo)
                    .addComponent(isPlayerOne))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(startGame_addPlayersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(startGame_player1Name)
                    .addComponent(startGame_player2Name)
                    .addComponent(startGame_player3Name)
                    .addComponent(startGame_player4Name, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, startGame_addPlayersLayout.createSequentialGroup()
                .addContainerGap(152, Short.MAX_VALUE)
                .addComponent(startGame_finishAddingPlayers, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(152, 152, 152))
        );
        startGame_addPlayersLayout.setVerticalGroup(
            startGame_addPlayersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(startGame_addPlayersLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(startGame_title, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(startGame_addPlayersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(isPlayerOne)
                    .addComponent(startGame_player1Name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(startGame_addPlayersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(isPlayerTwo)
                    .addComponent(startGame_player2Name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(startGame_addPlayersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(isPlayerThree)
                    .addComponent(startGame_player3Name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(startGame_addPlayersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(isPlayerFour)
                    .addComponent(startGame_player4Name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(startGame_finishAddingPlayers)
                .addContainerGap(64, Short.MAX_VALUE))
        );

        buyProperty.setMinimumSize(new java.awt.Dimension(400, 300));
        buyProperty.setResizable(false);

        buyProperty_yes.setText("Yes");
        buyProperty_yes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buyProperty_yesActionPerformed(evt);
            }
        });

        buyProperty_no.setText("No");
        buyProperty_no.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buyProperty_noActionPerformed(evt);
            }
        });

        buyProperty_name.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        buyProperty_name.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        buyProperty_name.setText("Would you like to buy: ");

        javax.swing.GroupLayout buyPropertyLayout = new javax.swing.GroupLayout(buyProperty.getContentPane());
        buyProperty.getContentPane().setLayout(buyPropertyLayout);
        buyPropertyLayout.setHorizontalGroup(
            buyPropertyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buyPropertyLayout.createSequentialGroup()
                .addGap(78, 78, 78)
                .addComponent(buyProperty_yes)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(buyProperty_no)
                .addGap(74, 74, 74))
            .addGroup(buyPropertyLayout.createSequentialGroup()
                .addGap(125, 125, 125)
                .addComponent(buyProperty_name)
                .addContainerGap(131, Short.MAX_VALUE))
        );
        buyPropertyLayout.setVerticalGroup(
            buyPropertyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, buyPropertyLayout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(buyProperty_name)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 153, Short.MAX_VALUE)
                .addGroup(buyPropertyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buyProperty_yes)
                    .addComponent(buyProperty_no))
                .addGap(57, 57, 57))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(1114, 960));
        setMinimumSize(new java.awt.Dimension(1114, 960));
        setResizable(false);

        Player1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Player1.setPreferredSize(new java.awt.Dimension(258, 200));

        player1_name.setText("Name:");

        player1_cashLabel.setText("Cash: $");

        player1_cash.setText("1500");

        player1_propertiesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Properties"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        player1_properties.setViewportView(player1_propertiesTable);
        if (player1_propertiesTable.getColumnModel().getColumnCount() > 0) {
            player1_propertiesTable.getColumnModel().getColumn(0).setResizable(false);
        }

        player1_jailCard.setText("No Get Out Of Jail Free Card");

        javax.swing.GroupLayout Player1Layout = new javax.swing.GroupLayout(Player1);
        Player1.setLayout(Player1Layout);
        Player1Layout.setHorizontalGroup(
            Player1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Player1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(Player1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(Player1Layout.createSequentialGroup()
                        .addComponent(player1_cashLabel)
                        .addGap(0, 0, 0)
                        .addComponent(player1_cash)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                        .addComponent(player1_jailCard))
                    .addGroup(Player1Layout.createSequentialGroup()
                        .addGroup(Player1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(player1_name)
                            .addComponent(player1_properties, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        Player1Layout.setVerticalGroup(
            Player1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Player1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(player1_name)
                .addGroup(Player1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(Player1Layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addGroup(Player1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(player1_cashLabel)
                            .addComponent(player1_cash))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(player1_properties, javax.swing.GroupLayout.DEFAULT_SIZE, 108, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(Player1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(player1_jailCard)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        Player2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        player2_name.setText("Name:");

        player2_cashLabel.setText("Cash: $");

        player2_cash.setText("1500");

        player2_propertiesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Properties"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        player2_properties.setViewportView(player2_propertiesTable);
        if (player2_propertiesTable.getColumnModel().getColumnCount() > 0) {
            player2_propertiesTable.getColumnModel().getColumn(0).setResizable(false);
        }

        player2_jailCard.setText("No Get Out Of Jail Free Card");

        javax.swing.GroupLayout Player2Layout = new javax.swing.GroupLayout(Player2);
        Player2.setLayout(Player2Layout);
        Player2Layout.setHorizontalGroup(
            Player2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Player2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(Player2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(Player2Layout.createSequentialGroup()
                        .addComponent(player2_cashLabel)
                        .addGap(0, 0, 0)
                        .addComponent(player2_cash))
                    .addComponent(player2_name)
                    .addComponent(player2_properties, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Player2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(player2_jailCard)
                .addContainerGap())
        );
        Player2Layout.setVerticalGroup(
            Player2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Player2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(player2_name)
                .addGap(18, 18, 18)
                .addGroup(Player2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(Player2Layout.createSequentialGroup()
                        .addGroup(Player2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(player2_cashLabel)
                            .addComponent(player2_cash))
                        .addGap(7, 7, 7))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Player2Layout.createSequentialGroup()
                        .addComponent(player2_jailCard, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addComponent(player2_properties, javax.swing.GroupLayout.DEFAULT_SIZE, 114, Short.MAX_VALUE)
                .addContainerGap())
        );

        Player3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        player3_name.setText("Name:");

        player3_cashLabel.setText("Cash: $");

        player3_cash.setText("1500");

        player3_propertiesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Properties"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        player3_properties.setViewportView(player3_propertiesTable);
        if (player3_propertiesTable.getColumnModel().getColumnCount() > 0) {
            player3_propertiesTable.getColumnModel().getColumn(0).setResizable(false);
        }

        player3_jailCard.setText("No Get Out Of Jail Free Card");

        javax.swing.GroupLayout Player3Layout = new javax.swing.GroupLayout(Player3);
        Player3.setLayout(Player3Layout);
        Player3Layout.setHorizontalGroup(
            Player3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Player3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(Player3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(Player3Layout.createSequentialGroup()
                        .addComponent(player3_properties, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(Player3Layout.createSequentialGroup()
                        .addGroup(Player3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(Player3Layout.createSequentialGroup()
                                .addComponent(player3_cashLabel)
                                .addGap(0, 0, 0)
                                .addComponent(player3_cash))
                            .addComponent(player3_name))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(player3_jailCard)))
                .addContainerGap())
        );
        Player3Layout.setVerticalGroup(
            Player3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Player3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(Player3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(Player3Layout.createSequentialGroup()
                        .addComponent(player3_name)
                        .addGap(18, 18, 18)
                        .addGroup(Player3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(player3_cashLabel)
                            .addComponent(player3_cash))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Player3Layout.createSequentialGroup()
                        .addComponent(player3_jailCard, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)))
                .addComponent(player3_properties, javax.swing.GroupLayout.DEFAULT_SIZE, 108, Short.MAX_VALUE)
                .addGap(12, 12, 12))
        );

        Player4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        player4_name.setText("Name:");

        player4_cashLabel.setText("Cash: $");

        player4_cash.setText("1500");

        player4_propertiesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Properties"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        player4_properties.setViewportView(player4_propertiesTable);
        if (player4_propertiesTable.getColumnModel().getColumnCount() > 0) {
            player4_propertiesTable.getColumnModel().getColumn(0).setResizable(false);
        }

        player4_jailCard.setText("No Get Out Of Jail Free Card");

        javax.swing.GroupLayout Player4Layout = new javax.swing.GroupLayout(Player4);
        Player4.setLayout(Player4Layout);
        Player4Layout.setHorizontalGroup(
            Player4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Player4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(Player4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(Player4Layout.createSequentialGroup()
                        .addComponent(player4_properties, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(Player4Layout.createSequentialGroup()
                        .addGroup(Player4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(player4_name)
                            .addGroup(Player4Layout.createSequentialGroup()
                                .addComponent(player4_cashLabel)
                                .addGap(0, 0, 0)
                                .addComponent(player4_cash)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(player4_jailCard)))
                .addContainerGap())
        );
        Player4Layout.setVerticalGroup(
            Player4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Player4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(Player4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(Player4Layout.createSequentialGroup()
                        .addComponent(player4_name)
                        .addGap(18, 18, 18)
                        .addGroup(Player4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(player4_cashLabel)
                            .addComponent(player4_cash))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Player4Layout.createSequentialGroup()
                        .addComponent(player4_jailCard)
                        .addGap(6, 6, 6)))
                .addComponent(player4_properties, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addGap(12, 12, 12))
        );

        BoardIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/monopoly/Images/MonopolyBoard.jpg"))); // NOI18N

        javax.swing.GroupLayout boardLayout = new javax.swing.GroupLayout(board);
        board.setLayout(boardLayout);
        boardLayout.setHorizontalGroup(
            boardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 820, Short.MAX_VALUE)
            .addGroup(boardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(boardLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(BoardIcon)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        boardLayout.setVerticalGroup(
            boardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 822, Short.MAX_VALUE)
            .addGroup(boardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(boardLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(BoardIcon)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout GameLayout = new javax.swing.GroupLayout(Game);
        Game.setLayout(GameLayout);
        GameLayout.setHorizontalGroup(
            GameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(GameLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(board, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(GameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Player2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Player3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Player4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Player1, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        GameLayout.setVerticalGroup(
            GameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(GameLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(GameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(board, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(GameLayout.createSequentialGroup()
                        .addComponent(Player1, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(Player2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(Player3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(Player4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        rollDice.setFont(new java.awt.Font("Tekton Pro", 0, 36)); // NOI18N
        rollDice.setText("Roll Dice");
        rollDice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rollDiceActionPerformed(evt);
            }
        });

        trade.setFont(new java.awt.Font("Tekton Pro", 0, 36)); // NOI18N
        trade.setText("Trade");
        trade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tradeActionPerformed(evt);
            }
        });

        manage.setFont(new java.awt.Font("Tekton Pro", 0, 36)); // NOI18N
        manage.setText("Manage");
        manage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manageActionPerformed(evt);
            }
        });

        endTurn.setFont(new java.awt.Font("Tekton Pro", 0, 36)); // NOI18N
        endTurn.setText("End Turn");
        endTurn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                endTurnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout buttonsLayout = new javax.swing.GroupLayout(buttons);
        buttons.setLayout(buttonsLayout);
        buttonsLayout.setHorizontalGroup(
            buttonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buttonsLayout.createSequentialGroup()
                .addComponent(rollDice, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(trade, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(manage, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(endTurn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        buttonsLayout.setVerticalGroup(
            buttonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(rollDice, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(trade, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(manage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(endTurn, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
        );

        indexOfPlayers.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        indexOfPlayers.setText("INDEX OF PLAYERS: ");

        p1Index.setText("1");

        p2Index.setText("1");

        p3Index.setText("1");

        p4Index.setText("1");

        buyPropertyButton.setText("Buy Property");
        buyPropertyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buyPropertyButtonActionPerformed(evt);
            }
        });

        jMenu1.setText("File");

        file_newGame.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        file_newGame.setText("New Game...");
        file_newGame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                file_newGameActionPerformed(evt);
            }
        });
        jMenu1.add(file_newGame);

        file_openGame.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        file_openGame.setText("Open Game...");
        file_openGame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                file_openGameActionPerformed(evt);
            }
        });
        jMenu1.add(file_openGame);

        file_save.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        file_save.setText("Save");
        file_save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                file_saveActionPerformed(evt);
            }
        });
        jMenu1.add(file_save);

        file_saveAs.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        file_saveAs.setText("Save As...");
        file_saveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                file_saveAsActionPerformed(evt);
            }
        });
        jMenu1.add(file_saveAs);

        file_close.setText("Close");
        file_close.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                file_closeActionPerformed(evt);
            }
        });
        jMenu1.add(file_close);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Game, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(buttons, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(indexOfPlayers)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(p1Index, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(p2Index, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(p3Index, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(p4Index, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(buyPropertyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(Game, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(buttons, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(indexOfPlayers, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(p1Index, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(p2Index, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(p3Index, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(p4Index, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(buyPropertyButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

	/* THIS IS HOW TO INITIALLY START THE GAME***
	 * When players start the game (over), this will reset everything to the
	 * default values.
	 */
    private void file_newGameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_file_newGameActionPerformed
        // TODO add your handling code here:
        startGame_addPlayers.dispose();
        startGame_player1Name.setText("");
        startGame_player2Name.setText("");
        startGame_player3Name.setText("");
        startGame_player4Name.setText("");
        startGame_addPlayers.setVisible(true);
        data = new Data();
        playerNum = 0;
        canRoll = true;
        chosen = false;
        addHotel = false;
        wantToBuy = false;
    }//GEN-LAST:event_file_newGameActionPerformed

	/* When players have a game from before they want to finish, this will open
	 * the game file from before if it was saved.
	 */
    private void file_openGameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_file_openGameActionPerformed
        // TODO add your handling code here:
        JFileChooser jfc = new JFileChooser();
        
        if (jfc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            try {
                File file = jfc.getSelectedFile();
                FileInputStream fis = new FileInputStream(file);
                ObjectInputStream ois = new ObjectInputStream(fis);
                location = file;
                try {
                    data = (Data) ois.readObject();
                } catch (ClassNotFoundException es) {
                    JOptionPane.showMessageDialog(this, es);
                }
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, e.toString());
            }
        }
    }//GEN-LAST:event_file_openGameActionPerformed

	/* If players wish to save their game again after a save is already saved,
	 * they can override that save file with file_save.
	 */
    private void file_saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_file_saveActionPerformed
        // TODO add your handling code here:
        if (location != null) {
            try {
                FileOutputStream fos = new FileOutputStream(location);
                ObjectOutputStream oos = new ObjectOutputStream(fos);
                oos.writeObject(data);
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, e.toString());
            }
        }
        else {
            file_saveAsActionPerformed(evt);
        }
    }//GEN-LAST:event_file_saveActionPerformed

	/* If players wish to save the current state of the game for later, this will
	 * create a file that holds all the information necessary to pick the game
	 * up again from the exact same spot.
	 */
    private void file_saveAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_file_saveAsActionPerformed
        // TODO add your handling code here:
        JFileChooser jfc = new JFileChooser();
        
        if (jfc.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            try {
                File file = jfc.getSelectedFile();
                location = jfc.getSelectedFile();
                FileOutputStream fos = new FileOutputStream(file);
                ObjectOutputStream oos = new ObjectOutputStream(fos);
                oos.writeObject(data);
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, e.toString());
            }
        }
    }//GEN-LAST:event_file_saveAsActionPerformed

	/* If the players wish to exit the game, this will close and wipe everything
	 * from the current game open, but first prompt to save in case the players
	 * forgot to do so.
	 */
    private void file_closeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_file_closeActionPerformed
        // TODO add your handling code here:
		file_saveActionPerformed(evt);
		System.exit(0);
    }//GEN-LAST:event_file_closeActionPerformed

	/* This will first check to see if the current player is allowed to roll by
	 * checking if he is in jail or if he already rolled. Then the player will
	 * roll the dice, the moves will be displayed, and the player will move and
	 * perform the correct operation (buying property, drawing a chance card)
	 * depending on the spot he landed on.
	 */
    private void rollDiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rollDiceActionPerformed
        // TODO add your handling code here:
		
		//Checks for if the player is in jail or has already rolled.
        ArrayList<Integer> var = new ArrayList<>();
        if(data.players.get(playerNum).inJail) {
            var = data.players.get(playerNum).roll();
            if(var.get(1).equals(var.get(2)) || data.players.get(playerNum).jailCount == 3) {
                data.players.get(playerNum).inJail = false;
                data.players.get(playerNum).jailCount = 0;
                data.players.get(playerNum).setID(data.players.get(playerNum).getID() + var.get(0));
                canRoll = false;
            }
            else {
                data.players.get(playerNum).jailCount++;
                canRoll = false;
            }
        }
        if(canRoll) {
            var = data.players.get(playerNum).roll();
            JOptionPane.showMessageDialog(this, "You rolled a " + var.get(1) + " and " + var.get(2) + " for a total of " + var.get(0));
            if (data.players.get(playerNum).getID() + var.get(0) > 40)
                data.players.get(playerNum).setCash(data.players.get(playerNum).getCash() + 200);
            data.players.get(playerNum).setID(data.players.get(playerNum).getID() + var.get(0));
        }
        else
            JOptionPane.showMessageDialog(this, "You've already rolled");
        canRoll = false;
        update();
		
		//For spot type 3, the player collects all money collected by taxes in free parking.
        if(data.bank.getProperty(data.players.get(playerNum).getID()).getType() == 3) {
            data.players.get(playerNum).setCash(data.players.get(playerNum).getCash() + data.bank.getTaxPool());
        }
		//For spot type 4, the player goes to Jail.
        if(data.bank.getProperty(data.players.get(playerNum).getID()).getType() == 4) {
            data.players.get(playerNum).setID(10);
            data.players.get(playerNum).inJail = true;
        }
		//For spot type 5, the player can either purchase the property if now owned,
		//or he must pay the person who owns that property depending on the number of
		//houses/hotels owned.
        if(data.bank.getProperty(data.players.get(playerNum).getID()).getType() == 5) {
            if(!data.bank.getProperty(data.players.get(playerNum).getID()).getName().equals("Error")) {
                for(int i = 0; i < data.players.size(); i++) {
                    for(int k = 0; k < data.players.get(i).properties.size(); i++) {
                        if(data.bank.getStaticProperty(data.players.get(playerNum).getID()).equals(data.players.get(i).properties.get(k))) {
                            data.players.get(playerNum).setCash(data.players.get(playerNum).getCash() - data.players.get(i).properties.get(k).getRent0());
                            data.players.get(i).setCash(data.players.get(i).getCash() + data.players.get(i).properties.get(k).getRent0());
                        }
                    }
                }
            } else {
            buyProperty.setVisible(true);
            try {
                Thread.sleep(5000);
            } catch(InterruptedException e) {
                buyProperty.setVisible(false);
                buyProperty.dispose();
                JOptionPane.showMessageDialog(this, "INTERRUPTED EXCEPTION");
            }
            if(wantToBuy) {
                data.players.get(playerNum).addProperty(data.bank.getProperty(data.players.get(playerNum).getID()));
                data.bank.properties.remove(data.bank.getProperty(data.players.get(playerNum).getID()));
            }
        }
        } 
		
		//For these spots, the player could purchase a railroad, or be required
		//to pay another player who owns that railroad depending on the number
		//of railroads owned by the owner in total.
        if(data.bank.getProperty(data.players.get(playerNum).getID()).getType() == 6) {
            int numRoads = 0;
            for(int i = 0; i < data.players.size(); i++) {
                for(int k = 0; k < data.players.get(i).properties.size(); i++) {
                    if(data.bank.getStaticProperty(data.players.get(playerNum).getID()).equals(data.players.get(i).properties.get(k))) {
                        numRoads++;
                    }                        
                }
                    switch(numRoads) {
                        case 0: break;
                        case 1: data.players.get(playerNum).setCash(data.players.get(playerNum).getCash() - 25);
                        data.players.get(i).setCash(data.players.get(i).getCash() + 25); break;
                        case 2: data.players.get(playerNum).setCash(data.players.get(playerNum).getCash() - 50);
                        data.players.get(i).setCash(data.players.get(i).getCash() + 50); break;
                        case 3: data.players.get(playerNum).setCash(data.players.get(playerNum).getCash() - 100);
                        data.players.get(i).setCash(data.players.get(i).getCash() + 100); break;
                        case 4: data.players.get(playerNum).setCash(data.players.get(playerNum).getCash() - 200);
                        data.players.get(i).setCash(data.players.get(i).getCash() + 200); break;
                    }
                    numRoads = 0;
            }
        }
		//On spot type 7, the player can purchase a utility or pay money to the 
		//player who owns that utility depending on his roll.
        if(data.bank.getProperty(data.players.get(playerNum).getID()).getType() == 7) {
            int toGive = 0;
            toGive = var.get(1) + var.get(2);
            for(int i = 0; i < data.players.size(); i++) {
                for(int k = 0; k < data.players.get(i).properties.size(); i++) {
                    if(data.bank.getStaticProperty(data.players.get(playerNum).getID()).equals(data.players.get(i).properties.get(k))) {
                        data.players.get(playerNum).setCash(data.players.get(playerNum).getCash() - toGive);
                        data.players.get(i).setCash(data.players.get(i).getCash() + toGive);
                    }
                }
            }
        }
		//On spot type 8, the player must pay taxes.
        if(data.bank.getProperty(data.players.get(playerNum).getID()).getType() == 8) {
            data.players.get(playerNum).setCash(data.players.get(playerNum).getCash() - 75);
            data.bank.setTaxPool(data.bank.getTaxPool() + 75);
        }
		//On spot type 9, the player must draw a chance card or community card.
        if(data.bank.getProperty(data.players.get(playerNum).getID()).getType() == 9) {
            if(data.players.get(playerNum).getID() == 8 || data.players.get(playerNum).getID() == 23 || data.players.get(playerNum).getID() == 37) {
                int got = data.chanceCards.getRandomID();
                data.chanceCards.doAction(data.players.get(playerNum), got, this, data);
            }
            if(data.players.get(playerNum).getID() == 8 || data.players.get(playerNum).getID() == 23 || data.players.get(playerNum).getID() == 37) {
                int got = data.communityCards.getRandomID();
                data.communityCards.doAction(data.players.get(playerNum), got, data, data.bank);
            }
        }
        update();
        

    }//GEN-LAST:event_rollDiceActionPerformed

	/*When a player wishes to trade, the trading option menu appears. */
    private void tradeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tradeActionPerformed
        // TODO add your handling code here:
        tradeDialog.show();
    }//GEN-LAST:event_tradeActionPerformed

	/* When a player wishes to manage his properties, he can add houses or
	 * hotels to his property.
	 */
    private void manageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manageActionPerformed
        // TODO add your handling code here:
		manageDialog.dispose();
		manage_title.setText(data.players.get(playerNum).getName() + ": Manage");
		manageDialog.setVisible(true);
    }//GEN-LAST:event_manageActionPerformed

	/* When a player wishes to end his turn, the dice will be passed onto the
	 * next player and this also checks to see if a player loses because he
	 * ran out of money.
	 */
    private void endTurnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_endTurnActionPerformed
        // TODO add your handling code here:
        if(data.players.get(playerNum).getCash() <= 0) {
            JOptionPane.showMessageDialog(this, "YOU LOSE!");
            data.players.remove(data.players.get(playerNum));
        }
        if(playerNum == data.players.size() - 1)
            playerNum = 0;
        else
            playerNum += 1;
        canRoll = true;
    }//GEN-LAST:event_endTurnActionPerformed

	/* This will take a property and a certain amount of money from someone
	 * and give them to someone else.
	 */
    public void trade(String player, String prop1, String prop2, int cash1, int cash2) {
        Player player1 = data.players.get(playerNum);
        Player player2 = data.getPlayerFromString(player);
        Property thisProp1 = player1.getPropertyFromString(prop1);
        Property thisProp2 = player2.getPropertyFromString(prop2);
        int player1CashGive = cash1;
        int player2CashGive = cash2;
        player1.setCash(player1.getCash() + player2CashGive);
        player2.setCash(player2.getCash() + player1CashGive);
        player1.removeProperty(thisProp1);
        player1.addProperty(thisProp2);
        player2.removeProperty(thisProp2);
        player2.addProperty(thisProp1);
        
    }
	
	/* This will add houses and hotel costs to the total amount that one will
	 * have to pay if they land on your property. You can see if you have enough
	 * money to purchase a number of houses or if you can purchase a hotel.
	 */
    private void manage(String prop1, int numHouse, boolean hotel) {
        Player player1 = data.players.get(playerNum);
        Property thisProp1 = player1.getPropertyFromString(prop1);
        int hotelCost = 0;
        if(hotel) {
            hotelCost = thisProp1.getHousePrice();
        }
        int numCost = 0;
        if(numHouse + thisProp1.getHouses() < 5) {
            numCost = numHouse * thisProp1.getHousePrice();
        }
        int finalCost = numCost + hotelCost;
        if(player1.getCash() - finalCost > 0) {
            thisProp1.setHouses(thisProp1.getHouses() + numHouse);
            if(hotel) {
                thisProp1.setHouses(0);
                thisProp1.setHotels(true);
            }
            player1.setCash(player1.getCash() - finalCost);
        }
    }
	
	/* This will refresh the panels on the side that hold all the player's
	 * information depending on the players playing and will be repeated after
	 * each operation.
	 */
    private void update() {
        DefaultTableModel tab1 = (DefaultTableModel) player1_propertiesTable.getModel();
        DefaultTableModel tab2 = (DefaultTableModel) player2_propertiesTable.getModel();
        DefaultTableModel tab3 = (DefaultTableModel) player3_propertiesTable.getModel();
        DefaultTableModel tab4 = (DefaultTableModel) player4_propertiesTable.getModel();
        while(tab1.getRowCount() > 0) {
            tab1.removeRow(0);
        }
        while(tab2.getRowCount() > 0) {
            tab2.removeRow(0);
        }
        while(tab3.getRowCount() > 0) {
            tab3.removeRow(0);
        }
        while(tab4.getRowCount() > 0) {
            tab4.removeRow(0);
        }
		
		if (isPlayer1) {
			ArrayList<Property> temp1 = data.players.get(0).getProperties();
			for(int i = 0; i < temp1.size(); i++) {
				Object[] content = {temp1.get(i).getName()};
				tab1.addRow(content);
			}
			player1_cash.setText(data.players.get(0).getCash() + "");
			p1Index.setText(data.players.get(0).getID() + "");
		}
		if (isPlayer2) {
			ArrayList<Property> temp2 = data.players.get(1).getProperties();
			for(int i = 0; i < temp2.size(); i++) {
				Object[] content = {temp2.get(i).getName()};
				tab2.addRow(content);
			}
			player2_cash.setText(data.players.get(1).getCash() + "");
			p2Index.setText(data.players.get(1).getID() + "");
		}
		if (isPlayer3) {
			ArrayList<Property> temp3 = data.players.get(2).getProperties();
			for(int i = 0; i < temp3.size(); i++) {
				Object[] content = {temp3.get(i).getName()};
				tab3.addRow(content);
			}
			player3_cash.setText(data.players.get(2).getCash() + "");
			p3Index.setText(data.players.get(2).getID() + "");
		}
		if (isPlayer4) {
			ArrayList<Property> temp4 = data.players.get(3).getProperties();
			for(int i = 0; i < temp4.size(); i++) {
				Object[] content = {temp4.get(i).getName()};
				tab4.addRow(content);
			}
			player4_cash.setText(data.players.get(3).getCash() + "");
			p4Index.setText(data.players.get(3).getID() + "");
		}
    }
	
	/* This will reset things to default on the panels just for when the game
	 * is reset.
	 */
	public void reset() {
		DefaultTableModel tab1 = (DefaultTableModel) player1_propertiesTable.getModel();
        DefaultTableModel tab2 = (DefaultTableModel) player2_propertiesTable.getModel();
        DefaultTableModel tab3 = (DefaultTableModel) player3_propertiesTable.getModel();
        DefaultTableModel tab4 = (DefaultTableModel) player4_propertiesTable.getModel();
        while(tab1.getRowCount() > 0) {
            tab1.removeRow(0);
        }
        while(tab2.getRowCount() > 0) {
            tab2.removeRow(0);
        }
        while(tab3.getRowCount() > 0) {
            tab3.removeRow(0);
        }
        while(tab4.getRowCount() > 0) {
            tab4.removeRow(0);
        }
		player1_cash.setText("0");
        player2_cash.setText("0");
        player3_cash.setText("0");
        player4_cash.setText("0");
	}

	/* Should not do anything, this listener was accidentally added. */
    private void trade_propertyGivenFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trade_propertyGivenFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_trade_propertyGivenFieldActionPerformed

	/* Should not do anything, this listener was accidentally added. */
    private void trade_cashGivenFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trade_cashGivenFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_trade_cashGivenFieldActionPerformed

	/* When pressed, the trade requested will go through. */
    private void accept_acceptBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_accept_acceptBtnActionPerformed
        // TODO add your handling code here:
        accepted = true;
        accept.hide();
        accept.dispose();
    }//GEN-LAST:event_accept_acceptBtnActionPerformed

	/* This will reject the trade and continue the game. */
    private void accept_declineBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_accept_declineBtnActionPerformed
        // TODO add your handling code here:
        accepted = false;
        accept.hide();
        accept.dispose();
    }//GEN-LAST:event_accept_declineBtnActionPerformed

	/* If the player no longer wishes to add houses or a hotel, this will wipe
	 * and hide the dialog.
	 */
    private void manage_cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manage_cancelActionPerformed
        // TODO add your handling code here:
		manageDialog.dispose();
		manageDialog.setVisible(false);
    }//GEN-LAST:event_manage_cancelActionPerformed

	/* If the player has finished his decision on how many houses or a hotel to
	 * add to his property, this will check to see that everything is in order
	 * before proceeding.
	 */
    private void manage_finishActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manage_finishActionPerformed
        // TODO add your handling code here:
        boolean goodSoFar = true;
        if(manage_propertyField.getText().equals("") || manage_houseField.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Empty Fields");
            manageDialog.setVisible(false);
            manageDialog.dispose();
            goodSoFar = false;
        }
        int houseAdd = Integer.parseInt(manage_houseField.getText());
        Property tempProp = data.players.get(playerNum).getPropertyFromString(manage_propertyField.getText());
        if(tempProp.getHouses() + houseAdd > 4) {
            JOptionPane.showMessageDialog(this, "too many houses");
            manageDialog.setVisible(false);
            manageDialog.dispose();
            goodSoFar = false;
        }
        if(goodSoFar)
            manage(manage_propertyField.getText(), Integer.parseInt(manage_houseField.getText()), addHotel);
    }//GEN-LAST:event_manage_finishActionPerformed

	/* If the player wishes to add a hotel during the manage, the variable will
	 * record that he wanted a hotel.
	 */
    private void manage_hotelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manage_hotelActionPerformed
        // TODO add your handling code here:
        if (addHotel)
            addHotel = false;
        else
            addHotel = true;
    }//GEN-LAST:event_manage_hotelActionPerformed

	/* After the players all put in their name, this will check to see if there
	 * will be a player 1.
	 */
    private void isPlayerOneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_isPlayerOneActionPerformed
        // TODO add your handling code here:
        if (isPlayer1)
            isPlayer1 = false;
        else
            isPlayer1 = true;
    }//GEN-LAST:event_isPlayerOneActionPerformed

	/* After the players all put in their name, this will check to see if there
	 * will be a player 2.
	 */
    private void isPlayerTwoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_isPlayerTwoActionPerformed
        // TODO add your handling code here:
        if (isPlayer2)
            isPlayer2 = false;
        else
            isPlayer2 = true;
    }//GEN-LAST:event_isPlayerTwoActionPerformed

	/* After the players all put in their name, this will check to see if there
	 * will be a player 3.
	 */
    private void isPlayerThreeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_isPlayerThreeActionPerformed
        // TODO add your handling code here:
        if (isPlayer3)
            isPlayer3 = false;
        else
            isPlayer3 = true;
    }//GEN-LAST:event_isPlayerThreeActionPerformed

	/* After the players all put in their name, this will check to see if there
	 * will be a player 4.
	 */
    private void isPlayerFourActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_isPlayerFourActionPerformed
        // TODO add your handling code here:
        if (isPlayer4)
            isPlayer4 = false;
        else
            isPlayer4 = true;
    }//GEN-LAST:event_isPlayerFourActionPerformed

	/* When players are done adding in their names, the game will instantiate
	 * them and set their default properties and refresh the panels.
	 */
    private void startGame_finishAddingPlayersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startGame_finishAddingPlayersActionPerformed
        // TODO add your handling code here:
        if (!isPlayer1 && !isPlayer2 && !isPlayer3 && !isPlayer4)
            JOptionPane.showMessageDialog(this, "Please Add At Least One Player");
	else {
            data = new Data();
        player1_name.setText("Name:");
        player2_name.setText("Name:");
        player3_name.setText("Name:");
        player4_name.setText("Name:");
        player1_cash.setText("1500");
        player2_cash.setText("1500");
        player3_cash.setText("1500");
        player4_cash.setText("1500");
        if (isPlayer1) {
            data.players.add(new Player(startGame_player1Name.getText()));
            player1_name.setText(player1_name.getText() + startGame_player1Name.getText());
            Player1.setVisible(true);
        } else {
            Player1.setVisible(false);
        }
        if (isPlayer2) {
            data.players.add(new Player(startGame_player2Name.getText()));
            player2_name.setText(player2_name.getText() + startGame_player2Name.getText());
            Player2.setVisible(true);
        } else {
            Player2.setVisible(false);
        }
        if (isPlayer3) {
            data.players.add(new Player(startGame_player3Name.getText()));
            player3_name.setText(player3_name.getText() + startGame_player3Name.getText());
            Player3.setVisible(true);
        } else {
            Player3.setVisible(false);
        }
        if (isPlayer4) {
            data.players.add(new Player(startGame_player4Name.getText()));
            player4_name.setText(player4_name.getText() + startGame_player4Name.getText());
            Player4.setVisible(true);
        } else {
            Player4.setVisible(false);
        }
        startGame_addPlayers.setVisible(false);
		update();
		drawPlayers();
		}
    }//GEN-LAST:event_startGame_finishAddingPlayersActionPerformed

	/* This will show a dialog to the player receiving the trade for whether or
	 * not they wish to accept the trade.
	 */
    private void trade_finishBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trade_finishBtnActionPerformed
        // TODO add your handling code here:
//        if((trade_cashGivenField.getText().equals("") || trade_propertyGiven.getText().equals("")) || (trade_cashReceivedField.getText().equals("") || trade_propertyReceivedField.getText().equals("")) || trade_tradeeField.getText().equals("")) {
//            tradeDialog.hide();
//            tradeDialog.dispose();
//            JOptionPane.showMessageDialog(this, "Empty Field");
//        }
//        String name = trade_tradeeField.getText();
//        Player tempPlay = data.getPlayerFromString(name);
//        if(tempPlay.getName().equals("Error")){
//            tradeDialog.hide();
//            tradeDialog.dispose();
//            JOptionPane.showMessageDialog(this, "Player not Found");
//        }
//        Property tempProp1 = data.players.get(playerNum).getPropertyFromString(trade_propertyGiven.getText());
//        if(tempProp1.getName().equals("error")) {
//            tradeDialog.hide();
//            tradeDialog.dispose();
//            JOptionPane.showMessageDialog(this, "Property not Found");
//        }
//        Property tempProp2 = tempPlay.getPropertyFromString(trade_propertyGiven.getText());
//        if(tempProp2.getName().equals("error")) {
//            tradeDialog.hide();
//            tradeDialog.dispose();
//            JOptionPane.showMessageDialog(this, "Property not Found");
//        }
//        tradeDialog.hide();
//        accept.show();
//        accept_giveCash.setText(trade_cashGiven.getText());
//        accept_getProperty.setText(trade_propertyReceived.getText());
//        accept_giveProperty.setText(trade_propertyGiven.getText());
//        accept_getCash.setText(trade_cashReceived.getText());
//        try {
//            Thread.sleep(5000);
//        } catch(InterruptedException e) {
//            accept.hide();
//            accept.dispose();
//            tradeDialog.dispose();
//            JOptionPane.showMessageDialog(this, "INTERRUPTED EXCEPTION");
//        }
//        if(accepted)
          trade(trade_tradeeField.getText(), trade_propertyGiven.getText(), trade_propertyReceivedField.getText(), Integer.parseInt(trade_cashGivenField.getText()), Integer.parseInt(trade_cashReceivedField.getText()));
          tradeDialog.setVisible(false);
          tradeDialog.dispose();
    }//GEN-LAST:event_trade_finishBtnActionPerformed

	/* This will keep the cash required to "manage" the player's property updated
	 * so the player can know if he has enough to add the houses/hotel.
	 */
    private void manage_updateCashActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manage_updateCashActionPerformed
        // TODO add your handling code here: GET VALUES FROM PROPERTIES TO UPDATE
        String format = "Total Cost: $";
        int numHouses = Integer.parseInt(manage_houseField.getText());
        int finalCost = 0;
        finalCost = (data.players.get(playerNum).getPropertyFromString(manage_propertyField.getText()).getHousePrice()) * numHouses;
        if (addHotel) {
            finalCost += data.players.get(playerNum).getPropertyFromString(manage_propertyField.getText()).getHousePrice();
        }
        manage_cost.setText(format + finalCost);
    }//GEN-LAST:event_manage_updateCashActionPerformed

	/* After a player lands on a property and it is not owned, and he chose to
	 * buy it, the property will be removed from the bank and given to the player.
	 */
    private void buyProperty_yesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buyProperty_yesActionPerformed
        // TODO add your handling code here:
        if((data.bank.properties.get(data.players.get(playerNum).getID() - 1).getType() == 5
				|| data.bank.properties.get(data.players.get(playerNum).getID() - 1).getType() == 6
				|| data.bank.properties.get(data.players.get(playerNum).getID() - 1).getType() == 7)
				&& data.bank.canBuy(data.players.get(playerNum).getID() - 1)) {
            data.players.get(playerNum).properties.add(data.bank.takeProperty(data.players.get(playerNum).getID() - 1));
            data.players.get(playerNum).setCash(data.players.get(playerNum).getCash()
					- data.bank.getStaticProperty(data.players.get(playerNum).getID() - 1).getPrice());
        }
        buyProperty.setVisible(false);
        buyProperty.dispose();
        update();
    }//GEN-LAST:event_buyProperty_yesActionPerformed

	/* If the player does not wish to buy the property, the dialog disappears
	 * and the game proceeds.
	 */
    private void buyProperty_noActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buyProperty_noActionPerformed
        // TODO add your handling code here:
        wantToBuy = false;
        buyProperty.setVisible(false);
        buyProperty.dispose();
    }//GEN-LAST:event_buyProperty_noActionPerformed

	/* If a player lands on a property not yet bought, and he presses the button,
	 * he will be prompted to buy the property.
	 */
    private void buyPropertyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buyPropertyButtonActionPerformed
        // TODO add your handling code here:
        buyProperty.setVisible(true);
        buyProperty_name.setText("Would you like to buy: " + data.bank.staticProperties.get(data.players.get(playerNum).getID() - 1).getName());
    }//GEN-LAST:event_buyPropertyButtonActionPerformed

	/* Will keep the player's icon on the field currently updated.
	 */
	private void drawPlayers() {
		if (isPlayer1) {
			indexes[0] = data.players.get(0).getID();
		}
		if (isPlayer2) {
			indexes[1] = data.players.get(1).getID();
		}
		if (isPlayer3) {
			indexes[2] = data.players.get(2).getID();
		}
		if (isPlayer4) {
			indexes[3] = data.players.get(3).getID();
		}
		PlayerIcon a = (PlayerIcon) board;
		a.updatePlayers(indexes);
		board = a;
	}
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Board.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Board.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Board.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Board.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Board().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel BoardIcon;
    private javax.swing.JPanel Game;
    private javax.swing.JPanel Player1;
    private javax.swing.JPanel Player2;
    private javax.swing.JPanel Player3;
    private javax.swing.JPanel Player4;
    private javax.swing.JDialog accept;
    private javax.swing.JButton accept_acceptBtn;
    private javax.swing.JButton accept_declineBtn;
    private javax.swing.JLabel accept_get;
    private javax.swing.JLabel accept_getCash;
    private javax.swing.JLabel accept_getProperty;
    private javax.swing.JLabel accept_give;
    private javax.swing.JLabel accept_giveCash;
    private javax.swing.JLabel accept_giveProperty;
    private javax.swing.JLabel accept_traderName;
    private javax.swing.JPanel board;
    private javax.swing.JPanel buttons;
    private javax.swing.JDialog buyProperty;
    private javax.swing.JButton buyPropertyButton;
    private javax.swing.JLabel buyProperty_name;
    private javax.swing.JButton buyProperty_no;
    private javax.swing.JButton buyProperty_yes;
    private javax.swing.JButton endTurn;
    private javax.swing.JMenuItem file_close;
    private javax.swing.JMenuItem file_newGame;
    private javax.swing.JMenuItem file_openGame;
    private javax.swing.JMenuItem file_save;
    private javax.swing.JMenuItem file_saveAs;
    private javax.swing.JLabel indexOfPlayers;
    private javax.swing.JCheckBox isPlayerFour;
    private javax.swing.JCheckBox isPlayerOne;
    private javax.swing.JCheckBox isPlayerThree;
    private javax.swing.JCheckBox isPlayerTwo;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JButton manage;
    private javax.swing.JDialog manageDialog;
    private javax.swing.JButton manage_cancel;
    private javax.swing.JLabel manage_cost;
    private javax.swing.JButton manage_finish;
    private javax.swing.JCheckBox manage_hotel;
    private javax.swing.JTextField manage_houseField;
    private javax.swing.JLabel manage_housesLabel;
    private javax.swing.JLabel manage_note;
    private javax.swing.JTextField manage_propertyField;
    private javax.swing.JLabel manage_propertyLabel;
    private javax.swing.JLabel manage_title;
    private javax.swing.JButton manage_updateCash;
    private javax.swing.JLabel p1Index;
    private javax.swing.JLabel p2Index;
    private javax.swing.JLabel p3Index;
    private javax.swing.JLabel p4Index;
    private javax.swing.JLabel player1_cash;
    private javax.swing.JLabel player1_cashLabel;
    private javax.swing.JButton player1_jailCard;
    private javax.swing.JLabel player1_name;
    private javax.swing.JScrollPane player1_properties;
    private javax.swing.JTable player1_propertiesTable;
    private javax.swing.JLabel player2_cash;
    private javax.swing.JLabel player2_cashLabel;
    private javax.swing.JButton player2_jailCard;
    private javax.swing.JLabel player2_name;
    private javax.swing.JScrollPane player2_properties;
    private javax.swing.JTable player2_propertiesTable;
    private javax.swing.JLabel player3_cash;
    private javax.swing.JLabel player3_cashLabel;
    private javax.swing.JButton player3_jailCard;
    private javax.swing.JLabel player3_name;
    private javax.swing.JScrollPane player3_properties;
    private javax.swing.JTable player3_propertiesTable;
    private javax.swing.JLabel player4_cash;
    private javax.swing.JLabel player4_cashLabel;
    private javax.swing.JButton player4_jailCard;
    private javax.swing.JLabel player4_name;
    private javax.swing.JScrollPane player4_properties;
    private javax.swing.JTable player4_propertiesTable;
    private javax.swing.JButton rollDice;
    private javax.swing.JDialog startGame_addPlayers;
    private javax.swing.JButton startGame_finishAddingPlayers;
    private javax.swing.JTextField startGame_player1Name;
    private javax.swing.JTextField startGame_player2Name;
    private javax.swing.JTextField startGame_player3Name;
    private javax.swing.JTextField startGame_player4Name;
    private javax.swing.JLabel startGame_title;
    private javax.swing.JButton trade;
    private javax.swing.JDialog tradeDialog;
    private javax.swing.JPanel tradePanel;
    private javax.swing.JButton trade_cancelBtn;
    private javax.swing.JLabel trade_cashGiven;
    private javax.swing.JTextField trade_cashGivenField;
    private javax.swing.JLabel trade_cashReceived;
    private javax.swing.JTextField trade_cashReceivedField;
    private javax.swing.JButton trade_finishBtn;
    private javax.swing.JLabel trade_propertyGiven;
    private javax.swing.JTextField trade_propertyGivenField;
    private javax.swing.JLabel trade_propertyReceived;
    private javax.swing.JTextField trade_propertyReceivedField;
    private javax.swing.JTextField trade_tradeeField;
    private javax.swing.JLabel trade_tradeeName;
    private javax.swing.JLabel trade_traderName;
    // End of variables declaration//GEN-END:variables
}
